from __future__ import annotations
from pathlib import Path
from typing import Dict, List, Any
import json
import pandas as pd
from .clients import ClientConfig

def collect_metrics(client_dir: Path) -> Dict[str, Any]:
    """
    Read summary.json; fallback to CSV if missing.
    Returns keys: mean_quality, dormant_pct, owner_imbalance_pct, last_audited, summary_href.
    """
    summary_json = client_dir / "summary.json"
    summary_md = client_dir / "summary.md"
    summary_html = client_dir / "summary.html"
    lead_csv = client_dir / "lead_scores.csv"
    insights = {
        "mean_quality": 0.0,
        "dormant_pct": 0.0,
        "owner_imbalance_pct": 0.0,
        "last_audited": "",
        "summary_href": "summary.html" if summary_html.exists() else ("summary.md" if summary_md.exists() else ""),
    }
    if summary_json.exists():
        try:
            data = json.loads(summary_json.read_text(encoding="utf-8"))
            insights["mean_quality"] = float(data.get("mean_quality", 0.0))
            insights["dormant_pct"] = float(data.get("dormant_pct", 0.0))
            insights["owner_imbalance_pct"] = float(data.get("owner_imbalance_pct", 0.0))
            insights["last_audited"] = str(data.get("ts_utc", ""))
            return insights
        except Exception:
            pass
    if lead_csv.exists():
        try:
            df = pd.read_csv(lead_csv)
            if "lead_score" in df.columns:
                insights["mean_quality"] = float(round(df["lead_score"].mean(), 2))
        except Exception:
            pass
    return insights

def render_master_index(clients: List[ClientConfig], audits_root: Path, out_path: Path) -> None:
    """Generate audits/index.html with a clean table per client and link to summary."""
    rows: List[str] = []
    for c in clients:
        cdir = audits_root / c.slug
        m = collect_metrics(cdir)
        link = m.get("summary_href") or ""
        link_html = f'<a href="{c.slug}/{link}">Open</a>' if link else "â€”"
        failed = (cdir / "error.txt").exists()
        status = "FAILED" if failed else ""
        rows.append(
            "<tr>"
            f"<td>{c.name} <small>({c.slug})</small> {status and f'<span style=\"color:red;font-weight:600\">{status}</span>'}</td>"
            f"<td>{m.get('last_audited','')}</td>"
            f"<td>{m.get('mean_quality',0.0):.2f}</td>"
            f"<td>{m.get('dormant_pct',0.0):.2f}%</td>"
            f"<td>{m.get('owner_imbalance_pct',0.0):.2f}%</td>"
            f"<td>{link_html}</td>"
            "</tr>"
        )
    html = f"""<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>ADA Consultant Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
  body{{font-family:system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin:40px;}}
  table{{border-collapse:collapse; width:100%; max-width:1100px;}}
  th,td{{border:1px solid #ddd; padding:8px; text-align:left;}}
  th{{background:#f6f8fa;}}
  tr:nth-child(even){{background:#fafafa;}}
  .muted{{color:#666; font-size:12px}}
  </style>
</head>
<body>
  <h1>ADA Consultant Dashboard</h1>
  <p class="muted">Per-client audit summaries generated by ADA.</p>
  <table>
    <thead>
      <tr>
        <th>Client</th>
        <th>Last Audited (UTC)</th>
        <th>Avg Quality</th>
        <th>% Dormant</th>
        <th>Owner Load</th>
        <th>Report</th>
      </tr>
    </thead>
    <tbody>
      {''.join(rows) if rows else '<tr><td colspan="6">No audits yet.</td></tr>'}
    </tbody>
  </table>
</body>
</html>
"""
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(html, encoding="utf-8")
